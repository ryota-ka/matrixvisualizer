// Generated by CoffeeScript 1.7.1
(function() {
  var App;

  App = (function() {
    function App() {
      this.forms = {
        a: null,
        b: null,
        c: null,
        d: null
      };
      this.canvas;
      this.ctx;
      this.matrix = {
        a: 1,
        b: 0,
        c: 0,
        d: 1,
        det: 1,
        tr: 2
      };
      this.eigenValue = [1, 1];
      this.eigenVector = [[0, 0], [0, 0]];
      this.shapeType = 0;
    }

    App.prototype.draw = function() {
      this.ctx.setTransform(1, 0, 0, 1, 0, 0);
      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
      this.ctx.setTransform(this.matrix.a, -this.matrix.c, this.matrix.b, -this.matrix.d, this.canvas.width * 0.5, this.canvas.height * 0.5);
      this.ctx.fillStyle = this.matrix.det > 0 ? 'rgba(64, 255, 64, 0.9)' : 'rgba(255, 64, 64, 0.9)';
      switch (this.shapeType) {
        case 0:
          this.ctx.beginPath();
          this.ctx.fillRect(-100, -100, 200, 200);
          break;
        case 1:
          this.ctx.beginPath();
          this.ctx.arc(0, 0, 100, 0, 2 * Math.PI);
          this.ctx.fill();
          break;
      }
      this.ctx.setTransform(1, 0, 0, 1, 0, 0);
      this.drawGrid();
      this.ctx.setTransform(1, 0, 0, 1, this.canvas.width * 0.5, this.canvas.height * 0.5);
      this.ctx.strokeStyle = 'rgba(64, 64, 255, 0.9)';
      this.ctx.lineWidth = 2;
      this.ctx.beginPath();
      this.ctx.moveTo(-50 * this.eigenValue[0] * this.eigenVector[0][0], 50 * this.eigenValue[0] * this.eigenVector[0][1]);
      this.ctx.lineTo(50 * this.eigenValue[0] * this.eigenVector[0][0], -50 * this.eigenValue[0] * this.eigenVector[0][1]);
      this.ctx.stroke();
      this.ctx.beginPath();
      this.ctx.moveTo(-50 * this.eigenValue[1] * this.eigenVector[1][0], 50 * this.eigenValue[1] * this.eigenVector[1][1]);
      this.ctx.lineTo(50 * this.eigenValue[1] * this.eigenVector[1][0], -50 * this.eigenValue[1] * this.eigenVector[1][1]);
      return this.ctx.stroke();
    };

    App.prototype.resize = function() {
      this.canvas.width = document.documentElement.clientWidth;
      return this.canvas.height = document.documentElement.clientHeight;
    };

    App.prototype.drawGrid = function() {
      var i, _i, _j, _ref, _ref1, _results;
      this.ctx.strokeStyle = 'rgba(255, 255, 255, 0.6)';
      this.ctx.lineWidth = 2;
      this.ctx.beginPath();
      this.ctx.moveTo(this.canvas.width * 0.5, 0);
      this.ctx.lineTo(this.canvas.width * 0.5, this.canvas.height);
      this.ctx.stroke();
      this.ctx.beginPath();
      this.ctx.moveTo(0, this.canvas.height * 0.5);
      this.ctx.lineTo(this.canvas.width, this.canvas.height * 0.5);
      this.ctx.stroke();
      this.ctx.strokeStyle = 'rgba(255, 255, 255, 0.2)';
      this.ctx.lineWidth = 1;
      for (i = _i = 1, _ref = this.canvas.width / 100; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
        this.ctx.beginPath();
        this.ctx.moveTo(this.canvas.width * 0.5 + 50 * i, 0);
        this.ctx.lineTo(this.canvas.width * 0.5 + 50 * i, this.canvas.height);
        this.ctx.stroke();
        this.ctx.beginPath();
        this.ctx.moveTo(this.canvas.width * 0.5 - 50 * i, 0);
        this.ctx.lineTo(this.canvas.width * 0.5 - 50 * i, this.canvas.height);
        this.ctx.stroke();
      }
      _results = [];
      for (i = _j = 1, _ref1 = this.canvas.height / 100; 1 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 1 <= _ref1 ? ++_j : --_j) {
        this.ctx.beginPath();
        this.ctx.moveTo(0, this.canvas.height * 0.5 + 50 * i);
        this.ctx.lineTo(this.canvas.width, this.canvas.height * 0.5 + 50 * i);
        this.ctx.closePath();
        this.ctx.stroke();
        this.ctx.beginPath();
        this.ctx.moveTo(0, this.canvas.height * 0.5 - 50 * i);
        this.ctx.lineTo(this.canvas.width, this.canvas.height * 0.5 - 50 * i);
        this.ctx.closePath();
        _results.push(this.ctx.stroke());
      }
      return _results;
    };

    App.prototype.calc = function() {
      var discriminant, eigenvalueString, rootd;
      if (isFinite(this.forms.a.value) && isFinite(this.forms.b.value) && isFinite(this.forms.c.value) && isFinite(this.forms.d.value)) {
        this.matrix.a = parseFloat(this.forms.a.value);
        this.matrix.b = parseFloat(this.forms.b.value);
        this.matrix.c = parseFloat(this.forms.c.value);
        this.matrix.d = parseFloat(this.forms.d.value);
        this.matrix.det = this.matrix.a * this.matrix.d - this.matrix.b * this.matrix.c;
        this.matrix.tr = this.matrix.a + this.matrix.d;
        document.getElementById('det').textContent = 'determinant: ' + Math.round(this.matrix.det * 1000) / 1000;
        document.getElementById('tr').textContent = 'trace: ' + Math.round(this.matrix.tr * 1000) / 1000;
        discriminant = this.matrix.tr * this.matrix.tr - 4 * this.matrix.det;
        if (discriminant >= 0) {
          rootd = Math.sqrt(discriminant);
          if (this.matrix.b === 0 && this.matrix.c === 0) {
            this.eigenValue[0] = this.matrix.d;
            this.eigenValue[1] = this.matrix.a;
            this.eigenVector[0][0] = 0;
            this.eigenVector[0][1] = 1;
            this.eigenVector[1][0] = 1;
            this.eigenVector[1][1] = 0;
          } else {
            this.eigenValue[0] = (this.matrix.tr + rootd) * 0.5;
            this.eigenValue[1] = (this.matrix.tr - rootd) * 0.5;
            this.eigenVector[0][0] = this.matrix.b / Math.sqrt(this.matrix.b * this.matrix.b + (this.matrix.d - this.eigenValue[1]) * (this.matrix.d - this.eigenValue[1]));
            this.eigenVector[0][1] = (this.matrix.d - this.eigenValue[1]) / Math.sqrt(this.matrix.b * this.matrix.b + (this.matrix.d - this.eigenValue[1]) * (this.matrix.d - this.eigenValue[1]));
            this.eigenVector[1][0] = (this.matrix.a - this.eigenValue[0]) / Math.sqrt(this.matrix.c * this.matrix.c + (this.matrix.a - this.eigenValue[0]) * (this.matrix.a - this.eigenValue[0]));
            this.eigenVector[1][1] = this.matrix.c / Math.sqrt(this.matrix.c * this.matrix.c + (this.matrix.a - this.eigenValue[0]) * (this.matrix.a - this.eigenValue[0]));
          }
          if (this.eigenValue[0] === this.eigenValue[1]) {
            eigenvalueString = 'eigenvalue: ' + Math.round(this.eigenValue[0] * 1000) / 1000;
          } else {
            eigenvalueString = 'eigenvalues: ' + Math.round(this.eigenValue[0] * 1000) / 1000 + ', ' + Math.round(this.eigenValue[1] * 1000) / 1000;
          }
          document.getElementById('eigenvalues').textContent = eigenvalueString;
          if (this.matrix.det === 0) {
            if (!isFinite(this.eigenVector[0][0]) && isFinite(this.eigenVector[1][0])) {
              this.eigenVector[0][0] = this.eigenVector[1][0];
              this.eigenVector[0][1] = this.eigenVector[1][1];
            }
            if (isFinite(this.eigenVector[0][0]) && !(this.matrix.a === 0 && this.matrix.b === 0 && this.matrix.c === 0 && this.matrix.d === 0)) {
              document.getElementById('eigenvectors').textContent = 'eigenvector: (' + Math.round(this.eigenVector[0][0] * 1000) / 1000 + ', ' + Math.round(this.eigenVector[0][1] * 1000) / 1000 + ')';
            } else {
              document.getElementById('eigenvectors').textContent = '';
            }
          } else if (this.eigenValue[0] === this.eigenValue[1]) {
            if (this.matrix.a !== 0 && this.matrix.a === this.matrix.d && this.matrix.b === 0 && this.matrix.c === 0) {
              document.getElementById('eigenvectors').textContent = 'eigenvectors: any vectors';
            } else {
              if (!isFinite(this.eigenVector[0][0]) && isFinite(this.eigenVector[1][0])) {
                this.eigenVector[0][0] = this.eigenVector[1][0];
                this.eigenVector[0][1] = this.eigenVector[1][1];
              }
              if (isFinite(this.eigenVector[0][0])) {
                document.getElementById('eigenvectors').textContent = 'eigenvector: (' + Math.round(this.eigenVector[0][0] * 1000) / 1000 + ', ' + Math.round(this.eigenVector[0][1] * 1000) / 1000 + ')';
              }
            }
          } else {
            if (isFinite(this.eigenVector[0][0]) && isFinite(this.eigenVector[1][0])) {
              document.getElementById('eigenvectors').textContent = 'eigenvectors: (' + Math.round(this.eigenVector[0][0] * 1000) / 1000 + ', ' + Math.round(this.eigenVector[0][1] * 1000) / 1000 + '), (' + Math.round(this.eigenVector[1][0] * 1000) / 1000 + ', ' + Math.round(this.eigenVector[1][1] * 1000) / 1000 + ')';
            } else {
              if (!isFinite(this.eigenVector[0][0]) && isFinite(this.eigenVector[1][0])) {
                this.eigenVector[0][0] = this.eigenVector[1][0];
                this.eigenVector[0][1] = this.eigenVector[1][1];
              }
              if (isFinite(this.eigenVector[0][0])) {
                document.getElementById('eigenvectors').textContent = 'eigenvector: (' + Math.round(this.eigenVector[0][0] * 1000) / 1000 + ', ' + Math.round(this.eigenVector[0][1] * 1000) / 1000 + ')';
              } else {
                document.getElementById('eigenvectors').textContent = '';
              }
            }
          }
        } else {
          rootd = Math.sqrt(-discriminant);
          document.getElementById('eigenvalues').textContent = 'eigenvalues: ' + Math.round(this.matrix.tr * 500) / 1000 + ' Â±' + Math.round(this.matrix.tr * 500) / 1000 + 'i';
          document.getElementById('eigenvectors').textContent = '';
          this.eigenValue = [0, 0];
          this.eigenVector = [[0, 0], [0, 0]];
        }
      }
      return this.draw();
    };

    return App;

  })();

  window.onload = function() {
    window.app = new App();
    window.app.canvas = document.getElementById('canvas');
    window.app.ctx = window.app.canvas.getContext('2d');
    window.app.forms.a = document.getElementById('matrix_a');
    window.app.forms.b = document.getElementById('matrix_b');
    window.app.forms.c = document.getElementById('matrix_c');
    window.app.forms.d = document.getElementById('matrix_d');
    window.app.resize();
    window.app.calc();
    return window.app.canvas.addEventListener('click', function() {
      window.app.shapeType++;
      if (window.app.shapeType === 2) {
        window.app.shapeType = 0;
      }
      return window.app.draw();
    });
  };

  window.onresize = function() {
    window.app.resize();
    return window.app.draw();
  };

  window.onkeyup = function() {
    return window.app.calc();
  };

}).call(this);
